<chapter id="inst-sources"><title>Installing Bibletime Sources</title>
<para>
This chapter describes how sources are compiled.  These steps apply for both the
development version and the released version of bibletime and sword. </para>
<section id="inst-sources-sword"><title>Installation of SWORD and the Sword
Modules </title>
<para>
Sword and Sword modules are the "book library" for Bibletime.
Please see the page download for further information about downloading BibleTime.
</para>
<para>
Have a look at the requirements page to obtain SWORD. See page links to
obtain SWORD's modules.</para>

<section id="inst-sources-sword-install"><title>Installation of SWORD
</title>
<para>
This page shows sword 1.5.1a.  For other versions of sword, the file names
will be different.</para>

 <para>
First you have to unpack the downloaded .tar.gz file (if you are using the CVS
version, your sources will already be unpacked, so skip this step) to a
temporary directory. Do something like this: </para> <screen>
mkdir /tmp
cd /tmp
tar -xzf sword-1.5.1a.tar.gz
cd /tmp/sword-1.5.1a
</screen>


<para>
(the tar file will have unpacked into a directory named something similar to
sword-1.5.1a) </para>

<para>
Before you try to compile sword, you may need to modify
<filename> Makefile.cfg</filename> (it is located in the top directory of the
unpacked sources).  The customized section of <filename>Makefile.cfg</filename>
is marked, do not try to change parts of the file outside of the area marked
<emphasis>##### Customizable stuff. Set it how you like it #####</emphasis>
unless you really know what you are doing. </para>
<para>
For many installations the defaults will work.  When the defaults don't work,
these switches may be set.</para>
<table>
<title>Sword Makefile.cfg switches</title>
<tgroup cols="2">
<thead>
<row>
<entry>Switch</entry>
<entry>Description</entry>
</row>
</thead>
<tbody>
<row>
<entry># compiler</entry>
<entry>If you have gcc leave this alone, otherwise enter the compiler
you will be using.</entry> </row>
<row>
<entry># shared library-</entry>
<entry>Set to 'yes'.  this causes the shared library
<filename>libsord.so</filename> to be generated.  An entry must be placed into
the file <filename>/etc/ld.so.conf</filename> that points to libsword.
<filename>/usr/local/sword/lib</filename> is typical.  The shared
library is necessary for bibletime to work, but sword will compile without
errors if you don't do this.  Be careful here. </entry> </row>
<row>
<entry># VCL library-</entry>
<entry>Use the default 'no' unless you are using the sword install
manager, then use 'yes'.</entry> </row> <row>
<entry># Debugging options etc...</entry>
<entry>The defaults should work.</entry>
</row>
<row>
<entry># endian, etc. support for other hardware</entry>
<entry>Use the default if compiling on an Intel.  If you have other
hardware, select the correct entry.</entry> </row>
<row>
<entry># zLib support</entry>
<entry>Use the default 'yes'</entry>
</row>
<row>
<entry># paths</entry>
<entry>The defaults should be ok, but you can change them if you wish.  If you
wish to customize the install location of the library and the include files, you
have to decide if you want to install them in an extra directory like
<filename>/usr/local/sword/</filename> or at a common place like
<filename>/usr/local/</filename>.
Or you could install the libraries in
<filename>/usr/local/lib</filename> and the include files in
<filename>/usr/local/include</filename> choose <filename>/usr/local</filename>.

</entry>
</row>
</tbody>
</tgroup>
</table>


<para>Now start compiling by typing <command>make</command> and wait until it's
finished. After this you have to install the files. It's easy. Simply type
<command> make install </command>.
</para>
<para>
In the event that make command reports an error on completion, it probably
indicates that you are missing a package.  For example:</para>

<screen>
bash-2.03# make
make just-pre nodeps=yes
make[1]: Entering directory `/bible/sword-1.5.1a'
make -C src just-pre
.
.
.
make[1]: Entering directory `/bible/sword-1.5.1a/include'
make[1]: Nothing to be done for `just-targets'.
make[1]: Leaving directory `/bible/sword-1.5.1a/include'
make -C apps/X11/VCL just-targets
make[1]: Entering directory `/bible/sword-1.5.1a/apps/X11/VCL'
gcc -I../../../include/ -D_GNU_SOURCE -I. `gtk-config --cflags` -static -pipe -Wall -Wno-format
-fomit-frame-pointer -ggdb -O0 -m486 -c -o TWinControl.o TWinControl.cpp
<emphasis>/bin/sh: gtk-config: command not found </emphasis>
In file included from TWinControl.cpp:1:
<emphasis>TWinControl.h:6: gtk/gtkwidget.h: No such file or directory</emphasis>
<emphasis>TWinControl.cpp:3: gtk/gtkwidget.h: No such file or directory </emphasis>
In file included from TWinControl.cpp:1:
TWinControl.h:281: syntax error before `*'
TWinControl.h:284: parse error before `*'
TWinControl.cpp:10: parse error before `*'
make[1]: *** [TWinControl.o] Error 1
make[1]: Leaving directory `/bible/sword-1.5.1a/apps/X11/VCL'
make: *** [apps/X11/VCL/targets] Error 2
bash-2.03#
</screen>

<para>The italic lines above indicate that a gtk application was missing.  A
review of the available packages showed that one of the gtk packages
supplied with SuSE is gtkdev.  This turns out to be the application required to
allow make to run to completion without errors.  Often missing packages
will be found on your installation disks, or on your distribution's website.
Once <command>make</command> runs to completion without errors, then
<command>make install</command>. If it still doesn't work, edit the
file <filename>Makefile.cfg</filename> in the top directory of the SWORD sources
and change the line "<command>buildvcl := yes</command>" to "<command>buildvcl
:= no</command>" and try again.
</para>
</section>

<section id="inst-sources-sword-modules">
<title>Installation of modules</title>
<para>SWORD currently supports 3 types of modules: Bibles, dictionaries and
commentaries.  In order for sword and bibletime to be useful these modules must be installed.
</para><para>
Sword modules can be installed <link linkend="inst-sources-sword-manual">manually</link> or with
<link linkend="inst-sources-sword-installmgr">installmgr</link>.
Installmgr is provided as part of the sword package.  The directions here
will install the sword modules to the same location with either the manual method
or the installmgr.  However if you wish to customize the location of your
sword module directory, you must use the manual method.</para>




<section id="inst-sources-sword-modules-upack"><title>
Unpack the downloaded package</title>
<para>
First you have to unpack the downloaded package. On the download page of SWORD
you can choose if you want to get a Windows or RAW package. If you have a "Linux
only" box please get the RAW packages. But if you accidentally got a Windows
self extracting executable try using WINE to extract the files. Perhaps you have
to change the filename of "_INSTALL.1" to "_install.1" to get the setup running.
</para>
</section>
<section id="inst-sources-sword-modules-intig"><title>
Integrating modules</title>
<para>
Create the directory <filename>mods.d</filename> inside of your SWORD directory.
Please copy the file <filename>[modulename].conf</filename> into the
<filename>mods.d</filename> directory. the <filename>.conf</filename> file is
normally inside the unpacked module files. Now move the whole dir "modules"
which contains your unpacked module data files to the SWORD directory.  In the
example <filename>/usr/local/sword/share</filename> is the SWORD directory.</para>
<para> Directory Structure looks like this:
</para>
<screen>
/usr/local/sword/share/ -|- mods.d/ -|- module_1_name.conf
                   |           |- module_2_name.conf
                   |
                   |- texts/rawtext/ -|-module_1_name/files
                                      |-module_2_name/files
</screen>
</section>

</section>
</section>




</chapter>






